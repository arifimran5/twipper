generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  refresh_token_expires_in Int?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         PostLike[]
  PostSave      PostSave[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Post model
model Post {
  id        String     @id @default(cuid())
  content   String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  likes     PostLike[]
  PostSave  PostSave[]
}

// PostLikes model
model PostLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

// Save a new like for a post by a user
// async function likePost(userId, postId) {
//   const postLike = await prisma.postLike.create({
//     data: {
//       user: { connect: { id: userId } },
//       post: { connect: { id: postId } },
//     },
//   });
//   return postLike;
// }

// to get likes count of any post
// const post = await prisma.post.findUnique({
//     where: { id: postId },
//     include: {
//       likes: true,
//     },
//     });
//   post.likesCount = post.likes.length;

// Post Save

model PostSave {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

// Save a post for a user
// async function savePost(userId, postId) {
//   const postSave = await prisma.postSave.create({
//     data: {
//       user: { connect: { id: userId } },
//       post: { connect: { id: postId } },
//     },
//   });
//   return postSave;
// }
